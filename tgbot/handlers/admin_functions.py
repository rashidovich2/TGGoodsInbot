# - *- coding: utf- 8 - *-
import asyncio
import math
import random
import json
import gettext
import urllib.request
from pathlib import Path
from contextvars import ContextVar

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hlink
from aiogram.utils.exceptions import CantParseEntities

from babel import Locale
from tgbot.data.config import BOT_TOKEN, get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR
#from tgbot.middlewares.i18n import I18nMiddleware
#from aiogram.contrib.middlewares.i18n import I18nMiddleware
from tgbot.middlewares.i18n import I18nMiddleware

from tgbot.keyboards.inline_user import unwrap_post_finl, wrap_post_finl
from tgbot.keyboards.inline_admin import profile_search_finl, profile_search_reqs_finl, ad_add_to_plan_finl, ad_confirm_finl, ad_telegraph_finl, position_approve_reqs_finl, fund_add_confirmation_finl
from tgbot.keyboards.inline_z_all import ad_confirm_inl, ad_add_to_plan_inl
from tgbot.loader import dp, bot
from tgbot.services.api_sqlite import *
from tgbot.utils.misc.bot_filters import IsAdmin, IsAdminorShopAdmin
from tgbot.utils.misc_functions import open_profile_search, open_profile_search_req, upload_text, generate_sales_report, open_profile_search_seller, get_position_admin, get_refill_admin

#from munch import Munch

from html_telegraph_poster import TelegraphPoster
from html_telegraph_poster.upload_images import upload_image

i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
print(i18n)
_ = i18n.gettext

async def track_message_send(user_id, post_id):
    await add_sending_postx(user_id, post_id)
    await asyncio.sleep(5)

# –†–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(IsAdmin(), text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞_lite", state="*")
async def functions_mail(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_mail_text")
    await message.answer("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n"
                         "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É")

@dp.message_handler(IsAdmin(), state="here_mail_text")
async def functions_mail_get(message: Message, state: FSMContext):
    await state.update_data(here_mail_text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text))
    get_users = get_all_usersx()

    try:
        cache_msg = await message.answer(message.text)
        await cache_msg.delete()

        await state.set_state("here_mail_confirm")
        await message.answer(
            f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n"
            f"{message.text}",
            reply_markup=ad_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="plan_once_ad", state="*")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    get_users = get_all_usersx()
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    post_id = (await state.get_data())['post_id']
    ct = (await state.get_data())['ct']

    try:
        if get_action == "yes":
            cache_msg = await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω:{ct}")
            await cache_msg.delete()

        await state.set_state("here_ad_post_confirm")
        post = get_postx(post_id)
        print(post)

        await call.message.answer(f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n",
                                  reply_markup=ad_confirm_inl,
                                  disable_web_page_preview=True
                                  )
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                               "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                               "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_ad", state="here_mail_confirm")
async def functions_mail_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    send_message = (await state.get_data())['here_mail_text']
    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        asyncio.create_task(functions_mail_make(send_message, call))
    else:
        await call.message.edit_text("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>")


# –°–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_mail_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    get_time = get_unix()

    for user in get_users:
        try:
            await bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            receive_users += 1
        except:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({how_users}/{len(get_users)})</b>")

        await asyncio.sleep(0.08)

    await call.message.edit_text(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ <code>{get_unix() - get_time}—Å–µ–∫</code></b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(get_users)}</code>\n"
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users}</code>\n"
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users}</code>"
    )


# –†–∞—Å—Å—ã–ª–∫–∞ PRO
@dp.message_handler(text=["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ Mass Send"], state="*")
async def functions_ad(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await state.set_state("here_ad_post")
        await message.answer(_("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>", locale=lang))

######################################## –ü–†–ò–ù–Ø–¢–ò–ï –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state="here_ad_post", content_types=types.ContentType.ANY)
async def functions_ad_get(message: Message, state: FSMContext):
    await state.reset_state(with_data=False)
    get_users = get_all_usersx()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang, user_role)
    ct = 0
    shortlen = 450
    shortmestext = message.html_text[:449]

    if user_role in ["Admin", "ShopAdmin"]:
        print("P10P20R")
        mode = "tohour"
        if types.ContentType.TEXT == message.content_type:
            ct = 'text'
            print("!text message entered")
            await state.update_data(ct='text', here_ad_post=str(message.html_text))
            add_post_to_plan(ct, user_id, message.html_text, mode, caption='')
        elif types.ContentType.PHOTO == message.content_type:
            ct = 'photo'
            print("!photo message entered")
            caption=message.html_text if message.caption else None
            await state.update_data(ct="photo", here_ad_photo=message.photo[-1].file_id, caption=caption)
            add_post_to_plan(ct, user_id, message.photo[-1].file_id, mode, caption=caption)
        elif types.ContentType.VIDEO == message.content_type:
            ct = 'video'
            caption=message.html_text if message.caption else None
            await state.update_data(ct="video", here_ad_video=message.video.file_id, caption=caption)
            add_post_to_plan(ct, user_id, message.video[-1].file_id, mode, caption=caption)
        elif types.ContentType.ANIMATION == message.content_type:
            ct = 'animation'
            caption=message.html_text if message.caption else None
            await state.update_data(ct="animation", here_ad_animation=message.animation.file_id, caption=caption)
            add_post_to_plan(ct, user_id, message.animation[-1].file_id, mode, caption=caption)
        post_id = get_lastpost()

        print(post_id)

        try:
            cache_msg = await message.answer(f"–¢–∏–ø –ø–æ—Å—Ç–∞:{ct}")
            await state.update_data(post_id=post_id)
            print(post_id)
            user_id = message.from_user.id
            lang = get_userx(user_id=user_id)['user_lang']
            print(lang)
            await message.answer(_("<b>üì¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç –≤ —Ä–æ—Ç–∞—Ü–∏—é –±–æ—Ç–∞?</b>", locale=lang),
                reply_markup=ad_add_to_plan_finl(post_id),
                disable_web_page_preview=True
            )
        except CantParseEntities:
            await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                                 "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))



# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="telegraph_add", state="*")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    post_id = call.data.split(":")[1]
    get_action = call.data.split(":")[2]

    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    ct = (await state.get_data())['ct']
    print("–ü–£–¢–¨: Telegraph")
    #caption = (await state.get_data())['caption']
    #shortmestext = caption[0:400]

    t = TelegraphPoster(use_api=True)
    auth = t.create_api_token('Oleg Aliullov', 'Oleg', 'https://www.aliplaces.ru/') # second and third params are optional
    print(auth)

    #send_message = (await state.get_data())['here_ad_post']
    postt = get_postx(post_id)
    postj = {'post_id':postt['post_id'], 'post_text':postt['post_text'], 'post_photo':postt['post_photo'], 'post_file':f"{postt['post_id']}.png"}
    with open('posts.json', 'w', encoding='utf-8') as f:
        json.dump(postj, f, ensure_ascii=False, indent=4)

    if ct == "text":
        posttext = postt['post_text']
        image = upload_image("post_header.jpg")
    if ct == "photo":
        posttext = postt['caption']
        file_info = await bot.get_file(postt['post_photo'])
        print(file_info)
        destfilename = file_info.file_path.split('photos/')[1]
        filepath = file_info.file_path
        #path = str(f"{base_dir}{os.sep}photos")
        #fnum = random.randint(000000000, 999999999)
        #fname = f"{str(fnum)}.png"
        fname = f"{str(post_id)}.png"
        pdestf = f"/var/local/bot3101fc/tgbot/photos/{fname}"
        #pdestf = "/photos/" + destfilename
        print(pdestf)
        #fnum = random.randint(000000000, 999999999)
        #fname = fnum+".png"
        #print(destfilename, pdestf, filepatch)
        #await urllib.request.urlretrieve(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{filepath}', f'./{destifilename}')
        urllib.request.urlretrieve(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{filepath}', pdestf)
        filex = open(pdestf, 'rb')
        print(filex)
        #filex = open(photo_file, 'rb')
        image = upload_image(filex)
    #post = t.post(text=f'<blockquote>{posttext}</blockquote>')
    #print(post)
    post = t.post(title='–í–∞–∫–∞–Ω—Å–∏—è', author='—Ç—Ä–µ–±—É–µ—Ç—Å—è', text=f'<img src={image}><blockquote>{posttext}</blockquote>')
    print(post)

    shortmestext = f"{posttext[:400]}\n"
    print(shortmestext)
    hlinktext = hlink('—á–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ..', post['url'])
    #shortmesturl = post['url']
    shortmestext += hlinktext
    print(shortmestext)

    users = [919148970,5620443733,5891026661]
    for user in users:
        if ct == "text":
            await dp.bot.send_message(user, shortmestext, disable_web_page_preview=True, parse_mode='HTML') #, reply_markup=unwrap_post_finl(user, post_id)
        if ct == "photo":
            await db.bot.send_photo(chat_id=user, photo=postt['post_photo'], caption=shortmestext, disable_web_page_preview=True)
            #await dp.bot.send_message(user, shortmestext, disable_web_page_preview=True, parse_mode='HTML')
    #image = upload_image("post_header.jpg")
    #print(image)
    #post = t.post(text=f'<img src={image}><blockquote>Really soft way</blockquote>')
    #print(post)

    #await dp.bot.send_photo(919148970, message, disable_web_page_preview=True)

    #post_id = (await state.get_data())['post_id']
    #print(post_id)
    mode = "evening"
    '''if ct == "text":
        #print("|")
        send_message = (await state.get_data())['here_ad_post']
        shortmestext = send_message[0:400]
        post = t.post(text=f'<blockquote>{send_message}</blockquote>')
        print(post)
        shortmestext += f'<a href={post.url}>—á–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ..</a>'
        print(shortmestext)
        await dp.bot.send_message(919148970, shortmestext, disable_web_page_preview=True)
    elif ct == "photo":
        #print("||")
        send_photo = (await state.get_data())['here_ad_photo']
        caption = (await state.get_data())['caption']
        shortmestext = caption[0:400]
        post = t.post(text=f'<blockquote>{caption}</blockquote>')
        shortmestext += f'<a href={post.url}>—á–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ..</a>'
        await dp.bot.send_photo(919148970, send_photo, shortmestext, disable_web_page_preview=True)
    elif ct == "video":
        print("|||")
        send_video = (await state.get_data())['here_ad_video']
        caption = (await state.get_data())['caption']
    elif ct == "animation":
        #print("||||")
        send_animation = (await state.get_data())['here_ad_animation']
        caption = (await state.get_data())['caption']

    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        #await call.answer(f"{post_id}")
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        if ct == "text":
            asyncio.create_task(functions_adext_make(post_id, ct, send_message, 0, call))
        if ct == "photo":
            asyncio.create_task(functions_adext_make(post_id, ct, send_photo, caption, call))
        if ct == "video":
            asyncio.create_task(functions_adext_make(post_id, ct, send_video, caption, call))
        if ct == "animation":
            asyncio.create_task(functions_adext_make(post_id, ct, send_animation, caption, call))
    else:
        await call.message.edit_text(_("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>", locale=lang))'''



# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_ad", state="here_ad_post_confirm")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    post_id = call.data.split(":")[1]
    get_action = call.data.split(":")[2]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    ct = (await state.get_data())['ct']
    #post_id = (await state.get_data())['post_id']
    #print(post_id)
    mode = "evening"
    if ct == "text":
        #print("|")
        send_message = (await state.get_data())['here_ad_post']
    elif ct == "photo":
        #print("||")
        send_photo = (await state.get_data())['here_ad_photo']
        caption = (await state.get_data())['caption']
    elif ct == "video":
        print("|||")
        send_video = (await state.get_data())['here_ad_video']
        caption = (await state.get_data())['caption']
    elif ct == "animation":
        #print("||||")
        send_animation = (await state.get_data())['here_ad_animation']
        caption = (await state.get_data())['caption']

    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        #await call.answer(f"{post_id}")
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        if ct == "text":
            asyncio.create_task(functions_adext_make(post_id, ct, send_message, 0, call))
        if ct == "photo":
            asyncio.create_task(functions_adext_make(post_id, ct, send_photo, caption, call))
        if ct == "video":
            asyncio.create_task(functions_adext_make(post_id, ct, send_video, caption, call))
        if ct == "animation":
            asyncio.create_task(functions_adext_make(post_id, ct, send_animation, caption, call))
    else:
        await call.message.edit_text(_("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>", locale=lang))


# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), text=["üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è", "üîç Find Profile"], state="*")
async def functions_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.finish()

    await state.set_state("here_profile")
    await message.answer(_("<b>üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", locale=lang))


# –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤
@dp.message_handler(IsAdmin(), text=["üßæ –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤ üîç", "üßæ Find Receipts üîç"], state="*")
async def functions_receipt(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.finish()

    await state.set_state("here_receipt")
    await message.answer(_("<b>üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞</b>", locale=lang))


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(text=["üßæ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üßæ –£—Å–ø–µ—à–Ω—ã–µ", "üßæ Wait Confirmation", "üßæ Success"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        #await message.answer("<b>–í—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")

        if message.text in ["üßæ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üßæ Wait Confirmation"]:
            print("WAITCONFIRM")
            state = "waitconfirm"
        if message.text in ["üßæ –£—Å–ø–µ—à–Ω—ã–µ", "üßæ Success"]:
            print("SUCCESS")
            state = "success"

        all_refills = get_all_funds_adds_stated(state)
        print(all_refills)

        if len(all_refills) >= 1: #(_("<b>üßæ –ü–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>", locale=lang)
            await message.answer("<b>üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>")
            for refill in all_refills:
                #print(refill['refill_receipt'])
                get_message = await get_refill_admin(refill['refill_receipt'])
                await message.answer(get_message, reply_markup=fund_add_confirmation_finl(refill['refill_receipt'], lang))


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(text=["üñç –í–∞–∫–∞–Ω—Å–∏–∏ –°–æ–∑–¥–∞–Ω–Ω—ã–µ", "üñç Positions Created", "üñç –í–∞–∫–∞–Ω—Å–∏–∏ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ", "üñç Positions Approved", "üñç –í–∞–∫–∞–Ω—Å–∏–∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", "üñç Positions Posted", "üñç –í–∞–∫–∞–Ω—Å–∏–∏ –≤ –í–µ—â–∞–Ω–∏–∏", "üñç Positions in Broadcast"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):

    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await message.answer(_("<b>üßæ –ü–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>", locale=lang))

    if message.text in ["üñç –í–∞–∫–∞–Ω—Å–∏–∏ –°–æ–∑–¥–∞–Ω–Ω—ã–µ", "üñç Positions Created"]:
        print("CREATED")
        state = "Created"
    if message.text in ["üñç –í–∞–∫–∞–Ω—Å–∏–∏ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ", "üñç Positions Approved"]:
        print("APPROVED")
        state = "Approved"
    if message.text in ["üñç –í–∞–∫–∞–Ω—Å–∏–∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", "üñç Positions Posted"]:
        print("POSTED")
        state = "Posted"
    if message.text in ["üñç –í–∞–∫–∞–Ω—Å–∏–∏ –≤ –í–µ—â–∞–Ω–∏–∏", "üñç Positions in Broadcasting"]:
        print("BROADCAST")
        state = "Broadcast"

    all_positions = get_all_positions_requestx_stated(state)

    if len(all_positions) >= 1:
        await message.answer(_("<b>üßæ –ü–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>", locale=lang) + str(len(all_positions)) + "—à—Ç.")
        ten = []
        for position in all_positions:
            print(position['position_id'])
            get_message, get_photo = get_position_admin(position['position_id'])
            if get_photo is not None:
                await message.answer_photo(get_photo, get_message, reply_markup=position_approve_reqs_finl(position['position_id'], lang))
            else:
                await message.answer(get_position_admin(position['position_id']), reply_markup=position_approve_reqs_finl(position['position_id'], lang))


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(text=["üñç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã", "üñç Show list requests", "üñç –∑–∞–ø—Ä–æ—Å—ã Created", "üñç –∑–∞–ø—Ä–æ—Å—ã Approved", "üñç requests Created", "üñç requests Approved"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):

    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await message.answer(_("<b>üßæ –ü–æ—Å–º–æ—Ç—Ä–∏–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:</b>", locale=lang))

    if message.text in ["üñç –∑–∞–ø—Ä–æ—Å—ã Created", "üñç requests Created"]:
        print("CREATED")
        state = "created"
    if message.text in ["üñç –∑–∞–ø—Ä–æ—Å—ã Approved", "üñç requests Approved"]:
        print("APPROVED")
        state = "Approved"
    if message.text in ["üñç –∑–∞–ø—Ä–æ—Å—ã Posted", "üñç requests Posted"]:
        print("POSTED")
        state = "Posted"


    all_requesters = get_all_requestx_stated(state)

    #all_requesters = get_all_requestx()

    if len(all_requesters) >= 1:
        await message.answer(_("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–æ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞:", locale=lang) + str(len(all_requesters)) + "—à—Ç.")

        for requester in all_requesters:
            print(requester)
            #await state.finish()
            await message.answer(open_profile_search_req(requester['user_id'], lang), reply_markup=profile_search_reqs_finl(requester['user_id'], lang))



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(IsAdmin(), text=["üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", "üìä Sales Report"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']

    await message.answer(generate_sales_report())

    '''get_users = get_purchasesbysellers()

    if len(get_users)>= 1:
        await message.answer(_("–¢–æ–ø - –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", locale=lang) + str(get_users) + _("—à—Ç.", locale=lang))

        for user in get_users:

            await message.answer(open_profile_search_seller(user_id=user['user_id']), reply_markup=profile_search_finl(user['user_id']))'''

########################################### CALLBACKS ###########################################
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_ad2", state="here_ad_confirm")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    send_message = (await state.get_data())['here_ad_text']
    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/", locale=lang) + len(get_users) + _(")</b>", locale=lang))
        asyncio.create_task(functions_ad_make(send_message, call))
    else:
        await call.message.edit_text(_("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>", locale=lang))


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_purchases", state="*")
async def functions_profile_purchases(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    lang = get_userx(user_id=user_id)['user_lang']
    last_purchases = last_purchasesx(user_id, 10)

    if len(last_purchases) >= 1:
        await call.answer(_("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫", locale=lang))
        await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])
            if lang == "ru":
                await call.message.answer(f"<b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                          f"üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                          f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n"
                                          f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>")
            if lang == "en":
                await call.message.answer(f"<b>üßæ Receipt: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                          f"üéÅ Product: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}pcs | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                          f"üï∞ Purchase Date: <code>{purchases['purchase_date']}</code>\n"
                                          f"üîó Products: <a href='{link_items}'>clickable</a>")

        await call.message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
    else:
        if lang == "ru":
            await call.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)
        if lang == "en":
            await call.answer("‚ùó User don't have purchases", True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_adext_make(post_id, ct, message, caption, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    user_id = call.from_user.id
    print(user_id)
    lang = get_userx(user_id=user_id)['user_lang']
    ANNOUNCE_ID = 1655831466
    #shortlen = 400
    print(post_id)

    for user in get_users:
        try:
            if ct == "text":
                shortmestext = message[:400]
                msg = await dp.bot.send_message(user['user_id'], shortmestext, disable_web_page_preview=True, reply_markup=unwrap_post_finl(user_id, post_id))
                msgid = msg.message_id
                print(post_id, msgid, "afterap01")
                sending_id = random.randint(1000000000, 9999999999)
                print(sending_id)
                add_sending_postx7(sending_id, user['user_id'], post_id, msgid, 'wrapped')

                await asyncio.sleep(0.5)

            elif ct == "photo":
                shortmestext = caption[:400]
                msg = await dp.bot.send_photo(
                    chat_id=user['user_id'],
                    photo=message,
                    caption=shortmestext or None,
                    disable_web_page_preview=True,
                    reply_markup=unwrap_post_finl(user_id, post_id)
                )

                msgid = msg.message_id
                print(post_id, msgid, "afterap02")
                sending_id = random.randint(1000000000, 9999999999)
                print(sending_id)
                add_sending_postx7(sending_id, user['user_id'], post_id, msgid, 'wrapped')

                await asyncio.sleep(0.5)

            elif ct == "video":
                await dp.bot.send_video(
                    chat_id=user['user_id'],
                    video=message,
                    caption=caption or None,
                )
            elif ct == "animation":
                await dp.bot.send_animation(
                    chat_id=user['user_id'],
                    animation=message,
                    caption=caption or None,
                )

            receive_users += 1
        except Exception:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(
                f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({how_users}/{len(get_users)})</b>"
            )
        #_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang)
        await asyncio.sleep(0.05)

    if lang == "ru":
        await call.message.edit_text(
            f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>"
        )
    if lang == "en":
        await call.message.edit_text(
            f"<b>üì¢ Mass Sending has been finished ‚úÖ</b>\n"
            f"üë§ Users Received Messages: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ Users not Received Messages: <code>{block_users} ‚ùå</code>"
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_adext_make7(post_id, ct, message, caption, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    #user_id = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    ANNOUNCE_ID = 1655831466

    #shortlen = 400
    shortmestext = message[:400]
    #post_id = (await state.get_data())['post_id']
    print(post_id)

    for user in get_users:
        try:
            if ct == "text":
                msg = await dp.bot.send_message(user['user_id'], shortmestext, disable_web_page_preview=True)
                #asyncio.create_task(add_sending_postx(user['user_id'], post_id))
                await add_sending_postx(user['user_id'], post_id)
                await add_sending_postx3(user['user_id'], post_id)
                await add_sending_postx7(user['user_id'], post_id)
                await print(user['user_id'])
                #asyncio.create_task(track_message_send(user['user_id'], post_id))
                '''await dp.bot.forward_message(
                chat_id=1655831466, #1671959455,
                from_chat_id=user['user_id'], #6136080448, #message.chat.id,
                message_id=msg.message_id
                )'''
            elif ct == "photo":
                shortmestext = caption[:400]
                await dp.bot.send_photo(
                    chat_id=user['user_id'],
                    photo=message,
                    caption=shortmestext or None,
                )
                '''await dp.bot.forward_message(
                    chat_id=ANNOUNCE_ID,
                    from_chat_id=message.chat.id,
                    message_id=message.reply_to_message.message_id
                )'''
            elif ct == "video":
                await dp.bot.send_video(
                    chat_id=user['user_id'],
                    video=message,
                    caption=caption or None,
                )
            elif ct == "animation":
                await dp.bot.send_animation(
                    chat_id=user['user_id'],
                    animation=message,
                    caption=caption or None,
                )

            receive_users += 1
        except Exception:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(
                f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({how_users}/{len(get_users)})</b>"
            )
        #_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang)
        await asyncio.sleep(0.05)

    if lang == "ru":
        await call.message.edit_text(
            f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>"
        )
    if lang == "en":
        await call.message.edit_text(
            f"<b>üì¢ Mass Sending has been finished ‚úÖ</b>\n"
            f"üë§ Users Received Messages: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ Users not Received Messages: <code>{block_users} ‚ùå</code>"
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_ad_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()

    for user in get_users:
        try:
            await bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            receive_users += 1
        except Exception:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang) + str(how_users) + "/" + str(len(get_users)) + "</b>")

        await asyncio.sleep(0.05)

    await call.message.edit_text(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_post_request_approve", state="*")
async def functions_shopadmin_request_approve(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]

    user_id = call.from_user.id
    position = get_positionx(position_id=position_id)
    #update_userx(user_id, user_role="ShopAdmin")
    update_positionx(position_id, position_state="Approved")
    lang = "ru"
    #photo = f"img/seller_approved.png"
    #print(photo)

    #image = open(photo, 'rb')

    #await state.finish()
    #await call.message.answer_photo(image,
    #                                f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={user_id}'>{get_user['user_name']}</a> "
    #                                f"–∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –Ω–∞: <code>{get_user['user_role']}</code></b>", reply_markup=menu_frep(user_id, lang))
    await call.message.answer(f"<b>‚úÖ –ü–æ–∑–∏—Ü–∏—è {position['position_id']}\n "
                              f"–∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å –Ω–∞: <code>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ</code></b>") #, reply_markup=menu_frep(user_id, lang)

    await dp.bot.send_message(position['position_user_id'], "<b> –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–∞—Å–∞.</b>")


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_post_request_decline", state="*")
async def functions_shopadmin_request_decline(call: CallbackQuery, state: FSMContext):
    await state.finish()
    position_id = call.data.split(":")[1]
    print(position_id)
    position = get_positionx(position_id=position_id)
    update_positionx(position_id, position_state="Declined")
    #delete_position_requests_userx(position_id)

    #await call.answer(_(" –ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", locale=lang))
    await call.message.answer(f"<b>‚úÖ –ü–æ–∑–∏—Ü–∏—è {position['position_id']}\n "
                              f"–∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å –Ω–∞: <code>–û—Ç–∫–ª–æ–Ω–µ–Ω–∞</code></b>") #, reply_markup=menu_frep(user_id, lang)

    await dp.bot.send_message(
        position['position_user_id'],
        "<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.</b>"
    )

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_post_request_delete", state="*")
async def functions_shopadmin_request_decline(call: CallbackQuery, state: FSMContext):
    await state.finish()
    position_id = call.data.split(":")[1]
    print(position_id)
    position = get_positionx(position_id=position_id)
    delete_position_requests_userx(position_id)

    await call.message.answer(f"<b> –í–∞–∫–∞–Ω—Å–∏—è ID {position_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.</b>")

    '''await dp.bot.send_message(
        user_id,
        _("<b>–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –±—ã–ª—ã —É–¥–∞–ª–µ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.</b>",
          locale=lang,
          ),
    )'''

# –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_add", state="*")
async def functions_profile_balance_add(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await state.set_state("here_profile_add")
    await call.message.edit_text(_("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞</b>", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_set", state="*")
async def functions_profile_balance_set(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await state.set_state("here_profile_set")
    await call.message.edit_text(_("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>", locale=lang))


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_refresh", state="*")
async def functions_profile_refresh(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await call.message.delete()
    await call.message.answer(open_profile_search(user_id, lang), reply_markup=profile_search_finl(user_id))


######################################## –°–ú–ï–ù–ê –°–¢–ê–¢–£–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ############################

# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), state="here_user_request_approve")
async def functions_shopadmin_request_approvep(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    await state.finish()

    get_user = get_userx(user_id=user_id)
    update_userx(user_id, user_role="ShopAdmin")
    lang = get_user(user_id=user_id)['user_lang']

    await message.answer(
        f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
        f"–∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –Ω–∞: <code>{get_user['user_role']}</code></b>")

    await message.bot.send_message(
        user_id,
        _("<b> –í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ü—Ä–æ–¥–∞–≤—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ </b>", locale=lang),
    )
    await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))


######################################## –ü–†–ò–ù–Ø–¢–ò–ï –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state="here_ad_text")
async def functions_ad_get(message: Message, state: FSMContext):
    await state.update_data(here_ad_text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text))
    get_users = get_all_usersx()

    try:
        cache_msg = await message.answer(message.text)
        await cache_msg.delete()

        await state.set_state("here_ad_confirm")
        await message.answer(
            f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n"
            f"{message.text}",
            reply_markup=ad_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state="here_profile")
async def functions_profile_get(message: Message, state: FSMContext):
    find_user = message.text
    auser_id = message.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    if find_user.isdigit():
        get_user = get_userx(user_id=find_user)
    else:
        if find_user.startswith("@"): find_user = find_user[1:]
        print(find_user)
        get_user = get_userx(user_login=find_user.lower())

    if get_user is not None:
        await state.finish()
        await message.answer(open_profile_search(get_user['user_id'], lang),
                             reply_markup=profile_search_finl(get_user['user_id'], lang))
    else:
        await message.answer(_("<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</b>"
                             "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(IsAdmin(), state="here_profile_add")
async def functions_profile_balance_add_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 1000000000:
            user_id = (await state.get_data())['here_profile']
            await state.finish()

            get_user = get_userx(user_id=user_id)
            update_userx(user_id, user_balance=get_user['user_balance'] + int(message.text))

            await message.answer(
                f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                f"–≤—ã–¥–∞–Ω–æ <code>{message.text}‚ÇΩ</code></b>")

            await message.bot.send_message(user_id, f"<b>üí∞ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <code>{message.text}‚ÇΩ</code></b>")
            await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
        else:
            await message.answer(_("<b>‚ùå –°—É–º–º–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
                                 "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_set")
async def functions_profile_balance_set_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 1000000000:
            user_id = (await state.get_data())['here_profile']
            await state.finish()

            get_user = get_userx(user_id=user_id)
            update_userx(user_id, user_balance=message.text)

            await message.answer(
                f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                f"–∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ <code>{message.text}‚ÇΩ</code></b>")

            await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
        else:
            await message.answer(_("<b>‚ùå –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
                                 "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", locale=lang))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_message", state="*")
async def functions_profile_user_message(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])

    await state.set_state("here_profile_message")
    await call.message.edit_text("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                                 "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_message")
async def functions_profile_user_message_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    auser_id = message.from_user.id
    lang = get_userx(user_id=auser_id)['user_lang']
    await state.finish()

    get_message = _("<b>üíå –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>", locale=lang) + clear_html(message.text)
    get_user = get_userx(user_id=user_id)

    await message.bot.send_message(user_id, get_message)
    await message.answer(_("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ", locale=lang) + f"<a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                         + _("–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>", locale=lang) +
                         f"{get_message}")

    await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_receipt")
async def functions_receipt_search(message: Message, state: FSMContext):
    receipt = message.text[1:]
    get_refill = ""
    user_id = message.from_user.id
    #lang = get_userx(user_id=user_id)['user_lang']
    lang = "ru"

    if message.text.startswith("#"):
        get_refill = get_refillx(refill_receipt=receipt)
        get_purchase = get_purchasex(purchase_receipt=receipt)

        if get_refill is not None:
            await state.finish()

            '''if get_refill['refill_way'] == "Form":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ —Ñ–æ—Ä–º–µ</code>", locale=lang)
            elif get_refill['refill_way'] == "Nickname":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</code>", locale=lang)
            elif get_refill['refill_way'] == "Number":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–æ–º–µ—Ä—É</code>", locale=lang)
            else:'''
            way_input = f"ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_way']}</code>"

            if lang == "en":
                await message.answer(
                    f"<b>üßæ Receipt: <code>#{get_refill['refill_receipt']}</code></b>\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ User: <a href='tg://user?id={get_refill['user_id']}'>{get_refill['user_name']}</a> <code>({get_refill['user_id']})</code>\n"
                    f"üí∞ Charge Amount: <code>{get_refill['refill_amount']}‚ÇΩ</code>\n"
                    f"{way_input}\n"
                    f"üè∑ Comment: <code>{get_refill['refill_comment']}</code>\n"
                    f"üï∞ Date of charge: <code>{get_refill['refill_date']}</code>"
                )
            elif lang == "ru":
                await message.answer(
                    f"<b>üßæ –ß–µ–∫: <code>#{get_refill['refill_receipt']}</code></b>\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_refill['user_id']}'>{get_refill['user_name']}</a> <code>({get_refill['user_id']})</code>\n"
                    f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_amount']}‚ÇΩ</code>\n"
                    f"{way_input}\n"
                    f"üè∑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{get_refill['refill_comment']}</code>\n"
                    f"üï∞ –î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_date']}</code>"
                )
            return
        elif get_purchase is not None:
            await state.finish()

            link_items = await upload_text(message, get_purchase['purchase_item'])
            if lang == "en":
                await message.answer(
                    f"<b>üßæ Receipt: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ User: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> <code>({get_purchase['user_id']})</code>\n"
                    f"üè∑ Name of Product: <code>{get_purchase['purchase_position_name']}</code>\n"
                    f"üì¶ Products Purchased: <code>{get_purchase['purchase_count']}pcs</code>\n"
                    f"üí∞ Price for One Pieces: <code>{get_purchase['purchase_price_one']}R</code>\n"
                    f"üí∏ Summ of Purchaces: <code>{get_purchase['purchase_price']}R</code>\n"
                    f"üîó Items: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>\n"
                    f"üîª Balance Before Purchase: <code>{get_purchase['balance_before']}R</code>\n"
                    f"üî∫ Balance After Purchase: <code>{get_purchase['balance_after']}R</code>\n"
                    f"üï∞ Purchase Date: <code>{get_purchase['purchase_date']}</code>"
                )

            elif lang == "ru":
                await message.answer(
                    f"<b>üßæ –ß–µ–∫: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> <code>({get_purchase['user_id']})</code>\n"
                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_position_name']}</code>\n"
                    f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_purchase['purchase_count']}—à—Ç</code>\n"
                    f"üí∞ –¶–µ–Ω–∞ 1-–≥–æ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_price_one']}‚ÇΩ</code>\n"
                    f"üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_price']}‚ÇΩ</code>\n"
                    f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>\n"
                    f"üîª –ë–∞–ª–∞–Ω—Å –¥–æ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['balance_before']}‚ÇΩ</code>\n"
                    f"üî∫ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['balance_after']}‚ÇΩ</code>\n"
                    f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_date']}</code>"
                )
            return

    await message.answer(_("<b>‚ùå –ß–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                         "üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞", locale=lang))
