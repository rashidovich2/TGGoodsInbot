# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities
from babel import Locale
from tgbot.data.config import get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR

from tgbot.keyboards.inline_admin import category_edit_open_finl, position_edit_open_finl, category_edit_delete_finl, \
    position_edit_clear_finl, position_edit_delete_finl
from tgbot.keyboards.inline_z_all import category_remove_confirm_inl, position_remove_confirm_inl, \
    item_remove_confirm_inl, close_inl
from tgbot.keyboards.inline_z_page import *
from tgbot.keyboards.reply_z_all import finish_load_rep, items_frep, items_sh_frep
from tgbot.loader import dp
from tgbot.middlewares.throttling import rate_limit
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import clear_list
from tgbot.utils.misc.bot_filters import IsAdmin, IsShopAdmin, IsAdminorShopAdmin
from tgbot.utils.misc_functions import get_position_admin, upload_text
# –î–æ–±–∞–≤–ª–µ–Ω–æ
from tgbot.keyboards.location_keyboards import geo_1_kb
from tgbot.services.location_function import update_position_city, get_city_info

from tgbot.middlewares.i18n import I18nMiddleware
i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
_ = i18n.gettext

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(text=["üóÉ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üñç", "üóÉ Edit category üñç"], state="*")
async def product_category_edit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role in ["Admin", "ShopAdmin"]:
        if len(get_all_categoriesx()) >= 1:
            await state.finish()
            await message.answer(_("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                                 reply_markup=category_edit_open_fp(0, lang))
        else:
            await state.finish()
            await message.answer(_("<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.message_handler(text=["üóÉ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå", "üóÉ Delete all categories ‚ùå"], state="*")
async def product_category_remove(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role in ["Admin", "ShopAdmin"]:
        await message.answer(_("<b>üóÉ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? ‚ùå</b>\n"
                             "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã", locale=lang),
                             reply_markup=category_remove_confirm_inl)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(text="üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç2", state="*")
async def product_position_edit(message: Message, state: FSMContext):
    print('üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç  admin_products.py 73')
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        await message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                             reply_markup=position_edit_category_open_fp(0, lang))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(text=["üìÅ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚ùå", "üìÅ Delete all positions ‚ùå"], state="*")
async def product_position_remove(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        await message.answer(_("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏? ‚ùå</b>\n"
                             "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", locale=lang),
                             reply_markup=position_remove_confirm_inl)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text=["üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚ûï", "üéÅ Add Goods‚ûï"], state="*")
async def product_item_create(message: Message, state: FSMContext):
    print('üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚ûï  admin_products_shop.py 93')
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role in ["Admin", "ShopAdmin"]:
        if len(get_all_positionsx()) >= 1:
            await message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π</b>", locale=lang),
                                 reply_markup=products_add_category_open_fp(0, lang))
        else:
            await message.answer(_("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.</b>", locale=lang))


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text=["üéÅ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üñç", "üéÅ Delete Goods üñç"], state="*")
async def product_item_delete(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role == "Admin":
        await state.set_state("here_items_delete")
        await message.answer(_("<b>üñç –í–≤–æ–¥–∏—Ç–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å</b>\n"
                             "‚ùï –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏\n"
                             "‚ùï –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä:\n"
                             "<code>‚ñ∂ 123456,123456,123456</code>\n"
                             "<code>‚ñ∂ 123456 123456 123456</code>", locale=lang))


# -------------------------------------------------------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(text=["üéÅ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã ‚ùå", "üéÅ Delete All Goods ‚ùå"], state="*")
async def product_item_remove(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role == "Admin":
        await message.answer(_("<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã? ‚ùå</b>\n", locale=lang),
                             reply_markup=item_remove_confirm_inl)


################################################################################################
####################################### –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô #####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_category_name")
async def product_category_create_name(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    print(lang)
    if user_role == "Admin":
        if len(message.text) <= 100:
            add_categoryx(clear_html(message.text))
            await message.answer(_("<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>", locale=lang))
        else:
            await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>", locale=lang))


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ####################################
# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="catategory_edit_nextp:", state="*")
async def product_category_edit_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                                 reply_markup=category_edit_next_page_fp(remover, lang))

# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="catategory_edit_backp:", state="*")
async def product_category_edit_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.delete()
    await call.message.answer(_("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                              reply_markup=category_edit_back_page_fp(remover, lang))


# –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_here:", state="*")
async def product_category_edit_open(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    get_fat_count = len(get_positionsx(category_id=category_id))
    get_category = get_categoryx(category_id=category_id)

    if lang == "ru":
        await call.message.edit_text(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üìÅ –ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_fat_count}—à—Ç</code>",
                                     reply_markup=category_edit_open_finl(category_id, remover, lang))
    if lang == "en":
        await call.message.edit_text(f"<b>üóÉ Category: <code>{get_category['category_name']}</code></b>\n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üìÅ Position quantity: <code>{get_fat_count}pcs</code>",
                                     reply_markup=category_edit_open_finl(category_id, remover, lang))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_return:", state="*")
async def product_category_edit_return(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                                 reply_markup=category_edit_open_fp(remover, lang))


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_name:", state="*")
async def product_category_edit_name(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_category_remover=remover)

    await state.set_state("here_change_category_name")
    await call.message.delete()
    await call.message.answer(_("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), state="here_change_category_name")
async def product_category_edit_name_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if len(message.text) <= 100:
        async with state.proxy() as data:
            category_id = data['here_cache_category_id']
            remover = data['here_cache_category_remover']
        await state.finish()


        update_categoryx(category_id, category_name=clear_html(message.text))

        get_fat_count = len(get_positionsx(category_id=category_id))
        get_category = get_categoryx(category_id=category_id)

        if lang == "ru":
            await message.answer(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                                 "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üìÅ –ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_fat_count}—à—Ç</code>",
                                 reply_markup=category_edit_open_finl(category_id, remover, lang))
        if lang == "en":
            await message.answer(f"<b>üóÉ Category: <code>{get_category['category_name']}</code></b>\n"
                                 "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üìÅ Position Quantity: <code>{get_fat_count}pcs</code>",
                                 reply_markup=category_edit_open_finl(category_id, remover, lang))

    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑", locale=lang))


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(text_startswith="category_edit_delete:", state="*")
async def product_category_edit_delete(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        await call.message.edit_text("<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ?</b>",
                                     reply_markup=category_edit_delete_finl(category_id, remover, lang))


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(text_startswith="category_delete:", state="*")
async def product_category_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    get_action = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        if get_action == "yes":
            remove_categoryx(category_id=category_id)
            remove_positionx(category_id=category_id)
            remove_itemx(category_id=category_id)

            if lang == "ru":
                await call.answer("üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ‚úÖ")
            if lang == "en":
                await call.answer("üóÉ Category and all of data has been deleted succesfully ‚úÖ")
            if len(get_all_categoriesx()) >= 1:
                await call.message.edit_text(_("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                                             reply_markup=category_edit_open_fp(remover, lang))
            else:
                await call.message.delete()
        else:
            get_fat_count = len(get_positionsx(category_id=category_id))
            get_category = get_categoryx(category_id=category_id)

            if lang == "ru":
                await message.answer(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üìÅ –ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_fat_count}—à—Ç</code>",
                                     reply_markup=category_edit_open_finl(category_id, remover, lang))
            if lang == "en":
                await message.answer(f"<b>üóÉ Category: <code>{get_category['category_name']}</code></b>\n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üìÅ Position Quantity: <code>{get_fat_count}pcs</code>",
                                     reply_markup=category_edit_open_finl(category_id, remover, lang))


################################################################################################
#################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô ###################################
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_remove_category:", state="*")
async def product_category_remove_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if get_action == "yes":
        get_categories = len(get_all_categoriesx())
        get_positions = len(get_all_positionsx())
        get_items = len(get_all_itemsx())

        clear_categoryx()
        clear_positionx()
        clear_itemx()

        await call.message.edit_text(
            f"<b>üóÉ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏<code>({get_categories}—à—Ç)</code>, "
            f"–ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code> –∏ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
    else:
        await call.message.edit_text("<b>üóÉ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚úÖ</b>")


################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_nextp:", state="*")
async def product_position_create_next(call: CallbackQuery, state: FSMContext):
    print('–≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π  admin_products_shop.py 300')
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    print(remover)

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>", locale=lang),
                                 reply_markup=position_create_next_page_fp(remover, lang))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_backp:", state="*")
async def product_position_create_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>", locale=lang),
                                 reply_markup=position_create_back_page_fp(remover, lang))


@dp.callback_query_handler(IsAdmin(), text_startswith="position_shop_create_here:", state="*")
async def product_position_create(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_change_shop_id=category_id)

    if len(get_all_categoriesx()) >= 1:
        await call.message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>", locale=lang),
                             reply_markup=position_create_open_fp(0, lang))
    else:
        await call.message.answer(_("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>", locale=lang))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_here2:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('position_create_here - admin_products')
    category_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    print(category_id)

    await state.update_data(here_cache_change_category_id=category_id)

    await state.set_state("here_position_name")
    await call.message.edit_text(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º
# –ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
# @dp.message_handler(IsAdmin(), state="here_position_city")
# async def product_position_create_name(message: Message, state: FSMContext):
#     print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products_shop.py 344')
#     city_user = get_city_user(message.from_user.id)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_here:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('position_create_here - user_menu 160')
    category_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.update_data(here_cache_change_category_id=category_id)

    print('position_addtoshop - user_menu 555')
    user_id = call.from_user.id
    get_user_shops = get_shopsxx(admin=user_id)
    if len(get_user_shops) >= 1:
        await call.message.edit_text(_("<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>", loacle=lang),
                                     reply_markup=position_select_shop_fp(user_id))

        await state.set_state("here_position_addtoshop")
        await call.message.edit_text(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="here_position_addtoshop:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('here_position_addtoshop: - user_menu 574')
    shop_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_change_shop_id=shop_id)

    await state.set_state("here_position_name")
    await call.message.edit_text(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), state="here_position_name")
async def product_position_create_name(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 355')
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if len(message.text) <= 100:
        await state.update_data(here_position_name=clear_html(message.text), here_position_city=get_city_user(message.from_user.id)[0], position_city_id=get_city_user(message.from_user.id)[0])

        await state.set_state("here_position_price")
        await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_position_price")
async def product_position_create_price(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 366')
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_price=message.text)

            await state.set_state("here_position_description")
            await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
        else:
            await message.answer(_("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_position_description")
async def product_position_create_description(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 386')
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    try:
        if len(message.text) <= 600:
            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            await state.update_data(here_position_description=message.text)

            await state.set_state("here_position_photo")
            await message.answer(_("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), content_types="photo", state="here_position_photo")
@dp.message_handler(IsAdmin(), text="0", state="here_position_photo")
async def product_position_create_photo(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 418')
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    async with state.proxy() as data:
        position_user_id = message.from_user.id
        position_city = data['here_position_city']
        position_city_id = data['position_city_id']
        position_name = clear_html(data['here_position_name'])
        position_price = data['here_position_price']
        catategory_id = data['here_cache_change_category_id']
        position_description = data['here_position_description']
    await state.finish()

    position_photo = "" if "text" in message else message.photo[-1].file_id
    position_id = random.randint(1000000000, 9999999999)
    add_positionx(position_city, position_city_id, position_name, position_price, position_description, position_photo, catategory_id, position_user_id)

    await message.answer(_("<b>üìÅ –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>", locale=lang))


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang), reply_markup=position_edit_category_open_fp(0, lang))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category_nextp:", state="*")
async def product_position_edit_category_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang), reply_markup=position_edit_category_next_page_fp(remover, lang))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category_backp:", state="*")
async def product_position_edit_category_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang), reply_markup=position_edit_category_back_page_fp(remover, lang))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category:", state="*")
async def product_position_edit_category_open(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang),
                                     reply_markup=position_edit_open_fp(0, category_id, lang))
    else:
        await call.answer(_("üìÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", locale=lang))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_nextp:", state="*")
async def product_position_edit_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang), reply_markup=position_edit_next_page_fp(remover, category_id, lang))

# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_backp:", state="*")
async def product_position_edit_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang), reply_markup=position_edit_back_page_fp(remover, category_id, lang))

# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit:", state="*")
async def product_position_edit_open(call: CallbackQuery, state: FSMContext):
    print('–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 496')
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await call.message.edit_text(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.delete()
        await call.message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang), reply_markup=position_edit_open_fp(remover, category_id, lang))
    else:
        await call.answer(_("<b>‚ùó –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", locale=lang))


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_name", state="*")
async def product_position_edit_name(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ api_sqlite.py 529')
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_name")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_name")
async def product_position_edit_name_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if len(message.text) <= 100:
        async with state.proxy() as data:
            position_id = data['here_cache_category_id']
            category_id = data['here_cache_position_id']
            remover = data['here_cache_position_remover']
        await state.finish()

        update_positionx(position_id, position_name=clear_html(message.text))
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
        else:
            await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_price", state="*")
async def product_position_edit_price(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_price")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_price")
async def product_position_edit_price_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            async with state.proxy() as data:
                position_id = data['here_cache_category_id']
                category_id = data['here_cache_position_id']
                remover = data['here_cache_position_remover']
            await state.finish()

            update_positionx(position_id, position_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
            else:
                await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
        else:
            await message.answer(_("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_description", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_description")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_description")
async def product_position_edit_description_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 600:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_positionx(position_id, position_description=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
            else:
                await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_edit_rest", state="*")
async def product_position_edit_name(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ api_sqlite.py 529')
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_rest")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_change_position_rest")
async def product_position_edit_rest_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if len(message.text) <= 100:
        async with state.proxy() as data:
            position_id = data['here_cache_category_id']
            category_id = data['here_cache_position_id']
            remover = data['here_cache_position_remover']
        await state.finish()

        update_positionx(position_id, position_rest=clear_html(message.text))
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
        else:
            await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))



# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_photo", state="*")
async def product_position_edit_photo(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_photo")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), content_types="photo", state="here_change_position_photo")
@dp.message_handler(IsAdmin(), text="0", state="here_change_position_photo")
async def product_position_edit_photo_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']
    await state.finish()

    position_photo = "" if "text" in message else message.photo[-1].file_id
    update_positionx(position_id, position_photo=position_photo)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))


# ---------------------------  –î–æ–±–∞–≤–ª–µ–Ω–æ 12.08.22 ------------------------------------------

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_city", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞  admin_products.py 715')
    print(call.data)
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    category_id = int(call.data.split(":")[2])
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[3])

    current_city = get_city_user(call.from_user.id)[0]

    await state.set_state("here_change_city")
    await state.update_data({'position_id': position_id, 'category_id': category_id, 'remover': remover})
    await call.message.delete()
    if lang == "ru":
        await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô</b>\n"
                                  "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                                  f"‚ùï –ì–æ—Ä–æ–¥ —Ç–æ–≤–∞—Ä–∞: <code>{current_city}</code>", reply_markup=geo_1_kb())
    if lang == "en":
        await call.message.answer("<b>üìÅ Choose different city üèô</b>\n"
                                  "‚ùï You can use geolocation or select a city from the list\n"
                                  f"‚ùïCity of product: <code>{current_city}</code>", reply_markup=geo_1_kb())

# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith = 'geo_chosen_cities', state='here_change_city')
async def geo_5(cb: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    info = int(str(cb.data).split('#')[1])
    if info == 0:
        async with state.proxy() as data:
            city = data['city']
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']
            city_id = data['city_id']

    else:
        async with state.proxy() as data:
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']

        city_id = info
        city = get_city_info(info)

    await state.finish()
    update_position_city(city[0], city_id, position_id)

    # update_positionx(position_id)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await cb.message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await cb.message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))



# –í—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_items", state="*")
async def product_position_edit_items(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    if lang == "en":
        save_items = ['IDProduct   -   Product Data', "================================"]

    elif lang == "ru":
        save_items = ['–ê–π–¥–∏–¢–æ–≤–∞—Ä–∞   -   –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞', "================================"]
    if len(get_items) >= 1:
        save_items.extend(
            f"{item['item_id']} - {item['item_data']}" for item in get_items
        )
        save_items = "\n".join(save_items)

        save_items = await upload_text(call, save_items)
        if lang == "ru":
            await call.message.answer(f"<b>üì• –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏: <code>{get_position['position_name']}</code>\n"
                                  f"üîó –°—Å—ã–ª–∫–∞: <a href='{save_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a></b>",
                                  reply_markup=close_inl)
        if lang == "en":
            await call.message.answer(f"<b>üì• All position items: <code>{get_position['position_name']}</code>\n"
                                  f"üîó Link: <a href='{save_items}'>Clickable</a></b>",
                                  reply_markup=close_inl)

        await call.answer()
    else:
        if lang == "ru":
            await call.answer("‚ùï –í –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã", True)
        if lang == "en":
            await call.answer("‚ùï This position has no items", True)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith="position_edit_delete", state="*")
async def product_position_edit_delete(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        await call.message.delete()
        await call.message.answer(_("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é? ‚ùå</b>", locale=lang), reply_markup=position_edit_delete_finl(position_id, category_id, remover, lang))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith="position_delete", state="*")
async def product_position_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        if get_action == "yes":
            remove_itemx(position_id=position_id)
            remove_positionx(position_id=position_id)

            await call.answer(_("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏ –µ—ë —Ç–æ–≤–∞—Ä—ã ‚úÖ", locale=lang))

            if len(get_positionsx(category_id=category_id)) >= 1:
                await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang), reply_markup=position_edit_open_fp(remover, category_id, lang))
            else:
                await call.message.delete()
        else:
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await call.message.delete()
                await call.message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
            else:
                await call.message.edit_text(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))


# –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_clear", state="*")
async def product_position_edit_clear(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏?</b>", locale=lang), reply_markup=position_edit_clear_finl(position_id, category_id, remover, lang))


# –°–æ–≥–ª–∞—Å–∏–µ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_clear", state="*")
async def product_position_edit_clear_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if get_action == "yes":
        remove_itemx(position_id=position_id)
        await call.answer(_("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏ ‚úÖ", locale=lang))

    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))
    else:
        await call.message.edit_text(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover, lang))


################################################################################################
###################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_remove_position:", state="*")
async def product_position_remove(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if get_action == "yes":
        get_positions = len(get_all_positionsx())
        get_items = len(get_all_itemsx())

        clear_positionx()
        clear_itemx()

        if lang == "ru":
            await call.message.edit_text(f"<b>üìÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code> –∏ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
        if lang == "en":
            await call.message.edit_text(f"<b>üìÅ You delete all position <code>({get_positions}—à—Ç)</code> anf positions<code>({get_items}pcs)</code> ‚òë</b>")
    else:
        await call.message.edit_text(_("<b>üìÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ‚úÖ</b>", locale=lang))


################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="back_add_products_to_category", state="*")
async def product_item_create(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π</b>", locale=lang), reply_markup=products_add_category_open_fp(0, lang))

# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_category_nextp", state="*")
async def product_item_load_category_next(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    remover = int(call.data.split(":")[1])

    await call.message.delete()
    await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π</b>", locale=lang), reply_markup=products_add_category_next_page_fp(remover, lang))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_category_backp", state="*")
async def product_item_load_category_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.delete()
    await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π</b>", locale=lang), reply_markup=products_add_category_back_page_fp(remover, lang))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_category", state="*")
async def product_item_load_category_open(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.delete()
        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é</b>", locale=lang), reply_markup=products_add_position_open_fp(0, category_id, lang))
    else:
        await call.answer(_("üéÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", locale=lang))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_position_nextp", state="*")
async def product_item_load_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é</b>", locale=lang), reply_markup=products_add_position_next_page_fp(remover, category_id, lang))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_position_backp", state="*")
async def product_item_load_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é</b>", locale=lang), reply_markup=products_add_position_back_page_fp(remover, category_id, lang))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@rate_limit(0)
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="products_add_position:", state="*")
async def product_item_load_open(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    await state.update_data(here_cache_add_item_category_id=category_id)
    await state.update_data(here_cache_add_item_position_id=position_id)
    await state.update_data(here_count_add_items=0)

    await state.set_state("here_add_items")
    await call.message.delete()
    await call.message.answer(_("<b>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n"
                              "‚ùó –¢–æ–≤–∞—Ä—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ—á–∫–æ–π. –ü—Ä–∏–º–µ—Ä:\n"
                              "<code>–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...\n\n"
                              "–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...\n\n"
                              "–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...</code>", locale=lang), reply_markup=finish_load_rep)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@rate_limit(0)
@dp.message_handler(IsAdminorShopAdmin(), text="üì• –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤", state="*")
async def product_item_load_finish(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    get_all_items = 0
    try:
        async with state.proxy() as data:
            get_all_items = data['here_count_add_items']
    except Exception:
        pass

    await state.finish()
    user_id = message.from_user.id
    ur = get_userx(user_id=user_id)['user_role']
    if ur == 'Admin':
        if lang == "ru":
            await message.answer("<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
                                 f"‚ñ∂ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_all_items}—à—Ç</code></b>", reply_markup=items_frep(lang))
        if lang == "en":
            await message.answer("<b>üì• Loading of items has been finished succesfully ‚úÖ\n"
                                 f"‚ñ∂ Items Uploaded: <code>{get_all_items}—à—Ç</code></b>", reply_markup=items_frep(lang))
    if ur == 'ShopAdmin':
        if lang == "ru":
            await message.answer("<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
                                 f"‚ñ∂ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_all_items}—à—Ç</code></b>", reply_markup=items_sh_frep(lang))
        if lang == "en":
            await message.answer("<b>üì• Loading of items has been finished succesfully ‚úÖ\n"
                                 f"‚ñ∂ Items Uploaded: <code>{get_all_items}—à—Ç</code></b>", reply_markup=items_sh_frep(lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
@rate_limit(0)
@dp.message_handler(IsAdminorShopAdmin(), state="here_add_items")
async def product_item_load_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    cache_msg = await message.answer(_("<b>‚åõ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è...</b>", locale=lang))

    count_add = get_all_items = 0
    get_all_items = clear_list(message.text.split("\n\n"))

    for check_item in get_all_items:
        if not check_item.isspace() and check_item != "":
            count_add += 1

    async with state.proxy() as data:
        category_id = data['here_cache_add_item_category_id']
        position_id = data['here_cache_add_item_position_id']
        data['here_count_add_items'] += count_add

    get_user = get_userx(user_id=message.from_user.id)
    add_itemx(category_id, position_id, get_all_items, get_user['user_id'], get_user['user_name'])
    if lang == "ru":
        await cache_msg.edit_text(f"<b>üì• –¢–æ–≤–∞—Ä—ã –≤ –∫–æ–ª-–≤–µ</b> <u>{count_add}—à—Ç</u> <b>–±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ</b>")
    if lang == "en":
        await cache_msg.edit_text(f"<b>üì• Items quantity</b> <u>{count_add}—à—Ç</u> <b>has been add succesfully ‚úÖ</b>")



################################################################################################
####################################### –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í ######################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_items_delete")
async def product_item_delete_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.finish()

    remove_ids, cancel_ids = [], []  # –ê–π–¥–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    get_item_ids_one, get_item_ids_two = [], [[]]
    save_ids = []

    if "," in message.text:
        get_item_ids_one = clear_list(message.text.split(","))
    else:
        get_item_ids_one = clear_list([message.text])

    get_item_ids_two.extend(
        item.split(" ") for item in get_item_ids_one if " " in item
    )
    if len(get_item_ids_two) == 1:
        get_item_ids_two.append(get_item_ids_one)

    for check_item in get_item_ids_two:
        save_ids.extend(iter(clear_list(check_item)))
    save_ids = clear_list(save_ids)

    for item_id in save_ids:
        check_item = get_itemx(item_id=item_id)
        if check_item is not None:
            remove_itemx(item_id=item_id)
            remove_ids.append(item_id)
        else:
            cancel_ids.append(item_id)

    remove_ids = ", ".join(remove_ids)
    cancel_ids = ", ".join(cancel_ids)

    if lang == "ru":
        await message.answer(f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                             f"‚ñ∂ <code>{remove_ids}</code>\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"‚ùå –ù–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                             f"‚ñ∂ <code>{cancel_ids}</code></b>")
    if lang == "en":
        await message.answer(f"<b>‚úÖ Successfully deleted items:\n"
                         f"‚ñ∂ <code>{remove_ids}</code>\n"
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         f"‚ùå Undiscovered goods:\n"
                         f"‚ñ∂ <code>{cancel_ids}</code></b>")


################################################################################################
##################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –¢–û–í–ê–†–û–í ####################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_remove_item:", state="*")
async def product_item_remove(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    get_action = call.data.split(":")[1]

    if get_action == "yes":
        get_items = len(get_all_itemsx())
        clear_itemx()
        if lang == "ru":
            await call.message.edit_text(f"<b>üéÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
        if lang == "en":
            await call.message.edit_text(f"<b>üéÅ You have deleted all the products<code>({get_items}pcs)</code> ‚òë</b>")
    else:
            await call.message.edit_text(_("<b>üéÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ ‚úÖ</b>", locale=lang))